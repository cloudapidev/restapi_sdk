<?php
/**
 * ConferencesApi
 * PHP version 5
 *
 * @category Class
 * @package  Tela\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Tela\Client\Api;

use \Tela\Client\Configuration;
use \Tela\Client\ApiClient;
use \Tela\Client\ApiException;
use \Tela\Client\ObjectSerializer;

/**
 * ConferencesApi Class Doc Comment
 *
 * @category Class
 * @package  Tela\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConferencesApi
{

    /**
     * API Client
     * @var \Tela\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Tela\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://27.111.216.231:8000/v1/token_fire');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Tela\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Tela\Client\ApiClient $apiClient set the API client
     * @return ConferencesApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * confCloseGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $conf_id conference ID, return confSessionId after join conference success (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function confCloseGet($x_auth_token, $conf_id)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling confCloseGet');
        }
        // verify the required parameter 'conf_id' is set
        if ($conf_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conf_id when calling confCloseGet');
        }
  
        // parse inputs
        $resourcePath = "/conf_close";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($conf_id !== null) {
            $queryParams['confId'] = $this->apiClient->getSerializer()->toQueryValue($conf_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * confInvitePost
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param object $post_body all post data (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function confInvitePost($x_auth_token, $post_body)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling confInvitePost');
        }
        // verify the required parameter 'post_body' is set
        if ($post_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_body when calling confInvitePost');
        }
  
        // parse inputs
        $resourcePath = "/conf_invite";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        // body params
        $_tempBody = null;
        if (isset($post_body)) {
            $_tempBody = $post_body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * confMuteGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $conf_id conference ID, return confSessionId after join conference success (required)
     * @param string $member_id conference member ID, return sessionId after join conference success (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function confMuteGet($x_auth_token, $conf_id, $member_id)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling confMuteGet');
        }
        // verify the required parameter 'conf_id' is set
        if ($conf_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conf_id when calling confMuteGet');
        }
        // verify the required parameter 'member_id' is set
        if ($member_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $member_id when calling confMuteGet');
        }
  
        // parse inputs
        $resourcePath = "/conf_mute";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($conf_id !== null) {
            $queryParams['confId'] = $this->apiClient->getSerializer()->toQueryValue($conf_id);
        }// query params
        if ($member_id !== null) {
            $queryParams['memberId'] = $this->apiClient->getSerializer()->toQueryValue($member_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * confPlayGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $conf_id conference ID, return confSessionId after join conference success (required)
     * @param string $file_url audio file path(on dialogic server) (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function confPlayGet($x_auth_token, $conf_id, $file_url)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling confPlayGet');
        }
        // verify the required parameter 'conf_id' is set
        if ($conf_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conf_id when calling confPlayGet');
        }
        // verify the required parameter 'file_url' is set
        if ($file_url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_url when calling confPlayGet');
        }
  
        // parse inputs
        $resourcePath = "/conf_play";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($conf_id !== null) {
            $queryParams['confId'] = $this->apiClient->getSerializer()->toQueryValue($conf_id);
        }// query params
        if ($file_url !== null) {
            $queryParams['fileUrl'] = $this->apiClient->getSerializer()->toQueryValue($file_url);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * confRecordGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $conf_id conference ID, return confSessionId after join conference success (required)
     * @param string $save_url record save path (required)
     * @param int $record_time record time (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function confRecordGet($x_auth_token, $conf_id, $save_url, $record_time)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling confRecordGet');
        }
        // verify the required parameter 'conf_id' is set
        if ($conf_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conf_id when calling confRecordGet');
        }
        // verify the required parameter 'save_url' is set
        if ($save_url === null) {
            throw new \InvalidArgumentException('Missing the required parameter $save_url when calling confRecordGet');
        }
        // verify the required parameter 'record_time' is set
        if ($record_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $record_time when calling confRecordGet');
        }
  
        // parse inputs
        $resourcePath = "/conf_record";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($conf_id !== null) {
            $queryParams['confId'] = $this->apiClient->getSerializer()->toQueryValue($conf_id);
        }// query params
        if ($save_url !== null) {
            $queryParams['saveUrl'] = $this->apiClient->getSerializer()->toQueryValue($save_url);
        }// query params
        if ($record_time !== null) {
            $queryParams['recordTime'] = $this->apiClient->getSerializer()->toQueryValue($record_time);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * confUnmuteGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $conf_id conference ID, return confSessionId after join conference success (required)
     * @param string $member_id conference member ID, return sessionId after join conference success (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function confUnmuteGet($x_auth_token, $conf_id, $member_id)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling confUnmuteGet');
        }
        // verify the required parameter 'conf_id' is set
        if ($conf_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conf_id when calling confUnmuteGet');
        }
        // verify the required parameter 'member_id' is set
        if ($member_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $member_id when calling confUnmuteGet');
        }
  
        // parse inputs
        $resourcePath = "/conf_unmute";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($conf_id !== null) {
            $queryParams['confId'] = $this->apiClient->getSerializer()->toQueryValue($conf_id);
        }// query params
        if ($member_id !== null) {
            $queryParams['memberId'] = $this->apiClient->getSerializer()->toQueryValue($member_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * kickPersonGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $conf_id conference ID, return confSessionId after join conference success (required)
     * @param string $member_id conference member ID, return sessionId after join conference success (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function kickPersonGet($x_auth_token, $conf_id, $member_id)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling kickPersonGet');
        }
        // verify the required parameter 'conf_id' is set
        if ($conf_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $conf_id when calling kickPersonGet');
        }
        // verify the required parameter 'member_id' is set
        if ($member_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $member_id when calling kickPersonGet');
        }
  
        // parse inputs
        $resourcePath = "/kick_person";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($conf_id !== null) {
            $queryParams['confId'] = $this->apiClient->getSerializer()->toQueryValue($conf_id);
        }// query params
        if ($member_id !== null) {
            $queryParams['memberId'] = $this->apiClient->getSerializer()->toQueryValue($member_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * queryConfGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $app_id appId, create app&#39;s ID on portal(can find in conference ID, subtring of confId; for example confId 47ae7c80-ed2e-4bc@101,substring 47ae7c80-ed2e-4bc is appId) (optional)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function queryConfGet($x_auth_token, $app_id=null)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling queryConfGet');
        }
  
        // parse inputs
        $resourcePath = "/query_conf";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($app_id !== null) {
            $queryParams['appId'] = $this->apiClient->getSerializer()->toQueryValue($app_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
    /**
     * stopConfRecordGet
     *
     * 
     *
     * @param string $x_auth_token authenticate token (required)
     * @param string $dialog_id conference record id, return after start record (required)
     * @return object[]
     * @throws \Tela\Client\ApiException on non-2xx response
     */
    public function stopConfRecordGet($x_auth_token, $dialog_id)
    {
        
        // verify the required parameter 'x_auth_token' is set
        if ($x_auth_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $x_auth_token when calling stopConfRecordGet');
        }
        // verify the required parameter 'dialog_id' is set
        if ($dialog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dialog_id when calling stopConfRecordGet');
        }
  
        // parse inputs
        $resourcePath = "/stop_conf_record";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($dialog_id !== null) {
            $queryParams['dialogId'] = $this->apiClient->getSerializer()->toQueryValue($dialog_id);
        }
        // header params
        if ($x_auth_token !== null) {
            $headerParams['X-Auth-Token'] = $this->apiClient->getSerializer()->toHeaderValue($x_auth_token);
        }
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, 'object[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, 'object[]');
        
    }
    
}
